def post_valkyrie(text):    try:        text = text.rstrip().replace("\n", " ")        text = text.replace("\"", "")        text = text.encode('utf-8')        head = {            'accept': 'application/json;charset=UTF-8',            'Content-Type': 'application/json;charset=UTF-8'        }        url = VALKYRE_SERVICE        post_data = "{ \"text\": \"" + str(text) + "\"}"        x = requests.post(url, data=post_data, headers=head)        return x.json()    except Exception as e:        current_app.logger.info('Error when processing request ' + str(e))        abort(500)def prepare_request_by_type(response_valkyre, type_ann):    """    Method to prepare the response depending on the type requested.    Args:        response_valkyre: response from the valkyre service        type_ann: list with the types we want to filter by    Returns:        JSON file with the found annotations, or empty otherwise.    """    result = []    if 'annotations' not in response_valkyre:        return {}    for annot in response_valkyre['annotations']:        if annot['type'] in type_ann:            result.append(annot)    response = {        'entities': result    }    return response@name_space.route("/requirements/")class Requirements(Resource):    @api.expect(Text)    def post(self):        """        Method for detecting software libraries and requirements from text.        Requirements include hardware requirements too. Anything on the "requirement" section        """        data = request.json        text = data.get('text')        entities = post_valkyrie(text)        current_app.logger.info('received a requirement request')        return prepare_request_by_type(entities, ['PythonLibrary', 'Hardware'])@name_space.route("/software_entities/")class SoftwareEntities(Resource):    @api.expect(Text)    def post(self):        """        Method for detecting libraries, frameworks, OS, and hardware that may not be required.        This method is a little more generic than requirements        """        data = request.json        text = data.get('text')        entities = post_valkyrie(text)        # TO DO        current_app.logger.info('received a software entity request')        return prepare_request_by_type(entities, ['PythonLibrary', 'Hardware'])@name_space.route("/agents/")class Requirements(Resource):    @api.expect(Text)    def post(self):        """        Method for detecting any responsible agent and organization.        These agents could appear as co-authors, in acknoweledgements (funding) or as a conference.        """        data = request.json        text = data.get('text')        entities = post_valkyrie(text)        # TO DO        current_app.logger.info('received an agent request')        return prepare_request_by_type(entities, ['Person'])